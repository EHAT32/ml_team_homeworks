import streamlit as st
import requests
from PIL import Image
import io
from io import BytesIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_URL = "http://api-service:5000/detect/"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="License Plate Blur", page_icon="üì∑")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'processed_image' not in st.session_state:
    st.session_state.processed_image = None

# –°—Ç–∏–ª–∏
st.markdown("""
    <style>
        .title {
            font-size: 36px;
            font-weight: bold;
            color: #2e7d32;
            text-align: center;
            margin-bottom: 20px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        .stButton > button {
            background-color: #4CAF50;
            color: white;
            border-radius: 8px;
            padding: 10px 20px;
        }
        .stButton > button:hover {
            background-color: #45a049;
        }
        .stButton > button {
            background: linear-gradient(45deg, #4CAF50, #81C784);
        }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<div class="title">Blur License Plates</div>', unsafe_allow_html=True)
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ‚Äî –º—ã –µ–≥–æ —Ä–∞–∑–º–æ–µ–º!")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"])

col1, col2 = st.columns(2)

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    with col1:
        st.image(image, caption='–û—Ä–∏–≥–∏–Ω–∞–ª', use_container_width=True)

    if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ"):
            # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
            image_bytes = uploaded_file.getvalue()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ multipart/form-data
            files = {
                "file": (uploaded_file.name, image_bytes, uploaded_file.type)
            }

            try:
                response = requests.post(API_URL, files=files)

                if response.status_code == 200:
                    processed_image = Image.open(BytesIO(response.content))
                    st.session_state.processed_image = processed_image
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                    st.code(response.text[:500])
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if st.session_state.processed_image is not None:
        with col2:
            st.image(st.session_state.processed_image, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç", use_container_width=True)

            buf = io.BytesIO()
            st.session_state.processed_image.save(buf, format="PNG")
            byte_im = buf.getvalue()

            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                data=byte_im,
                file_name="blurred_image.png",
                mime="image/png"
            )

else:
    with col1:
        st.info("–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    with col2:
        st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("<center>¬© 2025 License Plate Blur Service</center>", unsafe_allow_html=True)